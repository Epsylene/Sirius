
#include "Sirius/Renderer/Objects/PrefabMeshes.h"

namespace Sirius
{
    Cube::Cube(const Material& mat, bool perFaceTexture)
    {
        meshes.emplace_back();
        auto mesh = meshes.begin();

        if(perFaceTexture)
        {
            mesh->vertices = { {{ 1.f,  1.f, -1.f}, { 0.f,  1.f,  0.f}, { 1.f, 0.f }},
                               {{-1.f,  1.f, -1.f}, { 0.f,  1.f,  0.f}, { 0.f, 0.f }},
                               {{-1.f,  1.f,  1.f}, { 0.f,  1.f,  0.f}, { 0.f, 1.f }},
                               {{ 1.f,  1.f,  1.f}, { 0.f,  1.f,  0.f}, { 1.f, 1.f }},
                               {{ 1.f, -1.f,  1.f}, { 0.f,  0.f,  1.f}, { 1.f, 0.f }},
                               {{ 1.f,  1.f,  1.f}, { 0.f,  0.f,  1.f}, { 0.f, 0.f }},
                               {{-1.f,  1.f,  1.f}, { 0.f,  0.f,  1.f}, { 0.f, 1.f }},
                               {{-1.f, -1.f,  1.f}, { 0.f,  0.f,  1.f}, { 1.f, 1.f }},
                               {{-1.f, -1.f,  1.f}, {-1.f,  0.f,  0.f}, { 1.f, 0.f }},
                               {{-1.f,  1.f,  1.f}, {-1.f,  0.f,  0.f}, { 0.f, 0.f }},
                               {{-1.f,  1.f, -1.f}, {-1.f,  0.f,  0.f}, { 0.f, 1.f }},
                               {{-1.f, -1.f, -1.f}, {-1.f,  0.f,  0.f}, { 1.f, 1.f }},
                               {{-1.f, -1.f, -1.f}, { 0.f, -1.f,  0.f}, { 1.f, 0.f }},
                               {{ 1.f, -1.f, -1.f}, { 0.f, -1.f,  0.f}, { 0.f, 0.f }},
                               {{ 1.f, -1.f,  1.f}, { 0.f, -1.f,  0.f}, { 0.f, 1.f }},
                               {{-1.f, -1.f,  1.f}, { 0.f, -1.f,  0.f}, { 1.f, 1.f }},
                               {{ 1.f, -1.f, -1.f}, { 1.f,  0.f,  0.f}, { 1.f, 0.f }},
                               {{ 1.f,  1.f, -1.f}, { 1.f,  0.f,  0.f}, { 0.f, 0.f }},
                               {{ 1.f,  1.f,  1.f}, { 1.f,  0.f,  0.f}, { 0.f, 1.f }},
                               {{ 1.f, -1.f,  1.f}, { 1.f,  0.f,  0.f}, { 1.f, 1.f }},
                               {{-1.f, -1.f, -1.f}, { 0.f,  0.f, -1.f}, { 1.f, 0.f }},
                               {{-1.f,  1.f, -1.f}, { 0.f,  0.f, -1.f}, { 0.f, 0.f }},
                               {{ 1.f,  1.f, -1.f}, { 0.f,  0.f, -1.f}, { 0.f, 1.f }},
                               {{ 1.f, -1.f, -1.f}, { 0.f,  0.f, -1.f}, { 1.f, 1.f }} };
        }
        else
        {
            mesh->vertices = { {{ 1.f,  1.f, -1.f}, { 0.f,  1.f,  0.f}, { 0.625f, 0.5f  }},
                               {{-1.f,  1.f, -1.f}, { 0.f,  1.f,  0.f}, { 0.875f, 0.5f  }},
                               {{-1.f,  1.f,  1.f}, { 0.f,  1.f,  0.f}, { 0.875f, 0.25f }},
                               {{ 1.f,  1.f,  1.f}, { 0.f,  1.f,  0.f}, { 0.625f, 0.25f }},
                               {{ 1.f, -1.f,  1.f}, { 0.f,  0.f,  1.f}, { 0.375f, 0.25f }},
                               {{ 1.f,  1.f,  1.f}, { 0.f,  0.f,  1.f}, { 0.625f, 0.25f }},
                               {{-1.f,  1.f,  1.f}, { 0.f,  0.f,  1.f}, { 0.625f, 0.f   }},
                               {{-1.f, -1.f,  1.f}, { 0.f,  0.f,  1.f}, { 0.375f, 0.f   }},
                               {{-1.f, -1.f,  1.f}, {-1.f,  0.f,  0.f}, { 0.375f, 1.f   }},
                               {{-1.f,  1.f,  1.f}, {-1.f,  0.f,  0.f}, { 0.625f, 1.f   }},
                               {{-1.f,  1.f, -1.f}, {-1.f,  0.f,  0.f}, { 0.625f, 0.75f }},
                               {{-1.f, -1.f, -1.f}, {-1.f,  0.f,  0.f}, { 0.375f, 0.75f }},
                               {{-1.f, -1.f, -1.f}, { 0.f, -1.f,  0.f}, { 0.125f, 0.5f  }},
                               {{ 1.f, -1.f, -1.f}, { 0.f, -1.f,  0.f}, { 0.375f, 0.5f  }},
                               {{ 1.f, -1.f,  1.f}, { 0.f, -1.f,  0.f}, { 0.375f, 0.25f }},
                               {{-1.f, -1.f,  1.f}, { 0.f, -1.f,  0.f}, { 0.125f, 0.25f }},
                               {{ 1.f, -1.f, -1.f}, { 1.f,  0.f,  0.f}, { 0.375f, 0.5f  }},
                               {{ 1.f,  1.f, -1.f}, { 1.f,  0.f,  0.f}, { 0.625f, 0.5f  }},
                               {{ 1.f,  1.f,  1.f}, { 1.f,  0.f,  0.f}, { 0.625f, 0.25f }},
                               {{ 1.f, -1.f,  1.f}, { 1.f,  0.f,  0.f}, { 0.375f, 0.25f }},
                               {{-1.f, -1.f, -1.f}, { 0.f,  0.f, -1.f}, { 0.375f, 0.75f }},
                               {{-1.f,  1.f, -1.f}, { 0.f,  0.f, -1.f}, { 0.625f, 0.75f }},
                               {{ 1.f,  1.f, -1.f}, { 0.f,  0.f, -1.f}, { 0.625f, 0.5f  }},
                               {{ 1.f, -1.f, -1.f}, { 0.f,  0.f, -1.f}, { 0.375f, 0.5f  }} };
        }

        mesh->indices = { 0, 1, 2, 0, 2, 3,
                          4, 5, 6, 4, 6, 7,
                          8, 9, 10, 8, 10, 11,
                          12, 13, 14, 12, 14, 15,
                          16, 17, 18, 16, 18, 19,
                          20, 21, 22, 20, 22, 23 };

        mesh->textures = { mat.diffuseMap, mat.specularMap };

        auto vb = std::make_shared<VertexBuffer>(mesh->vertices);
        auto ib = std::make_shared<IndexBuffer>(mesh->indices);

        mesh->vertexArray = std::make_shared<VertexArray>(vb, ib);
    }

    Cube::Cube()
    {
        meshes.emplace_back();
        auto mesh = meshes.begin();

        mesh->vertices = { {{ 1.f,  1.f, -1.f}, { 0.f,  1.f,  0.f}, { 1.f, 0.f }},
                           {{-1.f,  1.f, -1.f}, { 0.f,  1.f,  0.f}, { 0.f, 0.f }},
                           {{-1.f,  1.f,  1.f}, { 0.f,  1.f,  0.f}, { 0.f, 1.f }},
                           {{ 1.f,  1.f,  1.f}, { 0.f,  1.f,  0.f}, { 1.f, 1.f }},
                           {{ 1.f, -1.f,  1.f}, { 0.f,  0.f,  1.f}, { 1.f, 0.f }},
                           {{ 1.f,  1.f,  1.f}, { 0.f,  0.f,  1.f}, { 0.f, 0.f }},
                           {{-1.f,  1.f,  1.f}, { 0.f,  0.f,  1.f}, { 0.f, 1.f }},
                           {{-1.f, -1.f,  1.f}, { 0.f,  0.f,  1.f}, { 1.f, 1.f }},
                           {{-1.f, -1.f,  1.f}, {-1.f,  0.f,  0.f}, { 1.f, 0.f }},
                           {{-1.f,  1.f,  1.f}, {-1.f,  0.f,  0.f}, { 0.f, 0.f }},
                           {{-1.f,  1.f, -1.f}, {-1.f,  0.f,  0.f}, { 0.f, 1.f }},
                           {{-1.f, -1.f, -1.f}, {-1.f,  0.f,  0.f}, { 1.f, 1.f }},
                           {{-1.f, -1.f, -1.f}, { 0.f, -1.f,  0.f}, { 1.f, 0.f }},
                           {{ 1.f, -1.f, -1.f}, { 0.f, -1.f,  0.f}, { 0.f, 0.f }},
                           {{ 1.f, -1.f,  1.f}, { 0.f, -1.f,  0.f}, { 0.f, 1.f }},
                           {{-1.f, -1.f,  1.f}, { 0.f, -1.f,  0.f}, { 1.f, 1.f }},
                           {{ 1.f, -1.f, -1.f}, { 1.f,  0.f,  0.f}, { 1.f, 0.f }},
                           {{ 1.f,  1.f, -1.f}, { 1.f,  0.f,  0.f}, { 0.f, 0.f }},
                           {{ 1.f,  1.f,  1.f}, { 1.f,  0.f,  0.f}, { 0.f, 1.f }},
                           {{ 1.f, -1.f,  1.f}, { 1.f,  0.f,  0.f}, { 1.f, 1.f }},
                           {{-1.f, -1.f, -1.f}, { 0.f,  0.f, -1.f}, { 1.f, 0.f }},
                           {{-1.f,  1.f, -1.f}, { 0.f,  0.f, -1.f}, { 0.f, 0.f }},
                           {{ 1.f,  1.f, -1.f}, { 0.f,  0.f, -1.f}, { 0.f, 1.f }},
                           {{ 1.f, -1.f, -1.f}, { 0.f,  0.f, -1.f}, { 1.f, 1.f }} };

        mesh->indices = { 0, 1, 2, 0, 2, 3,
                          4, 5, 6, 4, 6, 7,
                          8, 9, 10, 8, 10, 11,
                          12, 13, 14, 12, 14, 15,
                          16, 17, 18, 16, 18, 19,
                          20, 21, 22, 20, 22, 23 };

        auto vb = std::make_shared<VertexBuffer>(mesh->vertices);
        auto ib = std::make_shared<IndexBuffer>(mesh->indices);

        mesh->vertexArray = std::make_shared<VertexArray>(vb, ib);
    }
}
